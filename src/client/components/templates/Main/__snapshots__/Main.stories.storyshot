// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots components/templates/Main default 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <Connect(Component)>
          <Component
            dispatch={[Function]}
            orgName="orgs.name"
            userName="users.name"
          >
            <styled.header>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": true,
                      "lastClassName": "jsidzM",
                      "rules": Array [
                        "
  align-items: center;
  background: #333;
  color: #f5f5f5;
  font-size: 1.3rem;
  display: grid;
  grid-template-columns: repeat(auto-fit, 200px);
  justify-content: space-between;
  padding: 15px 30px;

  & > * {
    text-align: center;
  }
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <header
                  className="sc-bwzfXH jsidzM"
                >
                  <Styled(Link)
                    to="/"
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": true,
                            "lastClassName": "kuRBwa",
                            "rules": Array [
                              "
  color: #fff;
  text-decoration: none;
",
                            ],
                          },
                          "displayName": "Styled(Link)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                      to="/"
                    >
                      <Link
                        className="sc-bdVaJa kuRBwa"
                        replace={false}
                        to="/"
                      >
                        <a
                          className="sc-bdVaJa kuRBwa"
                          href="/"
                          onClick={[Function]}
                        >
                          &lt;
                        </a>
                      </Link>
                    </StyledComponent>
                  </Styled(Link)>
                  <span>
                    orgs.name
                  </span>
                  <span>
                    users.name
                  </span>
                </header>
              </StyledComponent>
            </styled.header>
          </Component>
        </Connect(Component)>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "gYfjpC",
                  "rules": Array [
                    "
  margin: 15px 30px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htpNat gYfjpC"
            >
              <p>
                body
              </p>
            </div>
          </StyledComponent>
        </styled.div>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;
